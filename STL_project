//Amal Mohamed
//This program uses STL to  create a vector of 1000 random integers.
//removes all mutiples of five,mixed parites,and mixed parities with prime numbers in the middle
//prints the result of each removal

#include <iostream>
#include <cstdlib>
#include <ctime>
#include <iterator>
#include <vector>
#include <iomanip>
#include <cmath>
using namespace std;

void mixedParity(vector <int> myVector,int MAXCOLS,int COLSIZE);
//Pre Condition: None
//Post Condition:None
//This function removes all prime numbers that sit between mixed parities
//and removes all mixed parities with prime numbers in the middle .
void printMixedParity(vector <int> myVector,int MAXCOLS,int COLSIZE);
//Pre Condition:None
//Post Condition:None
//This function prints the updated vector after the mixed parities that had
//prime numbers in middle have been removed from the vector.
void multFive(vector <int> myVector,int MAXCOLS,int COLSIZE);
//Pre Condition:none
//Post Condition:none
//This function removes numbers that are multiples of 5 from the Vector.
bool isPrime(int n);
//Pre Condition: The integer variable n is larger or equal to 1.
//Post Condition:None
//This function checks to see if a number  is prime.

int main(){
const int MAXNUM = 1000;
const int MAXCOLS = 5;
const int COLSIZE = 5;
int randNum;
vector <int> myVector;
cout<<" Welcome to my driver. "<< endl;
srand(time(0));
cout<<" This is my Vector of 1000 random integers:"<< endl;
for(int i =0; i<MAXNUM;i++){
  if(i % MAXCOLS==0){
    cout<<endl;
    }
   randNum=rand()%MAXNUM;
   myVector.push_back(randNum);
   cout<< setw(COLSIZE)<< randNum ;
      }
cout<< endl << endl;
multFive(myVector,MAXCOLS,COLSIZE);
cout<<endl<<endl;
mixedParity(myVector,MAXCOLS,COLSIZE);
cout<<endl;
printMixedParity(myVector,MAXCOLS,COLSIZE);
cout<<endl<<endl;
cout<<"Good bye,thank you for looking at my program."<<endl;
}

void mixedParity(vector<int>myVector,int MAXCOLS,int COLSIZE){
 vector<int>::iterator mParity;
 int counter=-1;
 cout<<endl;
 cout<< " All prime numbers that sit between a  mixed parity have been"<<endl;
 cout<< " removed from my vector:"<< endl;
 mParity= myVector.begin();
 int a=0;
 while( counter!=0){
   int counter=0;
   for(mParity = myVector.begin();(mParity+2)!= myVector.end(); mParity++){
     if(a % MAXCOLS==0){
       cout<<endl;
  }
     a++;
  if(((*mParity%2==0)&&((*mParity+2)%2!=0))||(((*mParity+2)%2==0)&&(*mParity%2==0)))
  {
    if(isPrime(*(mParity+1))==true){
      myVector.erase(mParity);
      mParity--;
      counter++;
   }

 }
  cout<< setw(COLSIZE) << *(mParity+1);
   }
   cout<<endl<<endl;
   if(counter==0){
     cout<< " All mixed Parities with prime numbers in the middle in" <<endl;
     cout<<" my vector have been removed:" <<endl;
   return;

 }
 else{
   counter=0;

 }
 }
}

void printMixedParity(vector<int> myVector,int MAXCOLS,int COLSIZE){
  int b=0;
  for(unsigned int i=0;i<myVector.size();i++){
    if(b%MAXCOLS==0){
      cout<<endl;
    }
    b++;
    cout<< setw(COLSIZE) << myVector[i];

  }

}

void multFive(vector<int> myVector,int MAXCOLS,int COLSIZE){
  vector<int>::iterator multipleFive;
  cout<<" All multiples of 5 have been removed from my vector:" << endl;
  int i =0;
  for(multipleFive=myVector.begin();multipleFive!=myVector.end();multipleFive++){
    if (i% MAXCOLS==0){
     cout<<endl;
    }
    i++;

    if(*multipleFive%5==0){
      myVector.erase(multipleFive);
      multipleFive--;

    }
    cout<< setw(COLSIZE)<< *multipleFive;

  }
}

bool isPrime(int n){
  if(n==1){
    return true;
  }
  for(int i=2;i<n;i++){
    if(n%i==0){
      return false;
    }
  }
 return true;
}
