//Amal Mohamed
//The program creates a BST and prints it in three traversals in-order,post-order,and pre-order.

#include<iostream>
#include<cstdlib>
#include<ctime>
using namespace std;

//Creates the node data and the pointer children left and right.
struct BstNode{
  int data;
  BstNode*left;
  BstNode*right;

};

int main()
{
  srand(time(0));
  BstNode*tRroot = nullptr;
  int randNum;
  int counter=0;
  int colNum=0;
  while(counter<MAXNODES)
    {
    randNum=rand()%MAX;
    cout<<"Value: " << randNum<<endl;
    if(insert(tRroot, randNum))
      counter++;
    }
  //Printing the Nodes in order
  cout<< endl<<endl;
  cout<<"Nodes in tree that are in (In-order):" <<endl;
  inOrder (tRroot,colNum);

  //Printing the nodes in pre-order
  cout<<"Nodes in tree that are in (Pre-order):"<<endl;
  preOrder(tRroot,colNum);

  //Printing the nodes in Post-order
  cout<<"Nodes in tree that are in (Post-order):"<<endl;
  postOrder(tRroot,colNum);
  return 0;
}

//Constructs the tree
bool insert (BstNode*& root,int d);

//prints the keys in order
void inOrder(BstNode* root,int& num);

//prints the keys in pre-order
void preOrder(BstNode* root,int& num);

//prints the keys in post-order
void postOrder(BstNode* root,int& num);

//deletes all nodes in the tree
 void deleteAll(BstNode*& root);

//initializing MAX and MAXNODES variable
 const int MAX = 100;
 const int MAXNODES=10;
 int counter=0;
 int colNum=0;

//insert function
bool insert(BstNode*& root,int d)
 {
   if(root== nullptr)
     {
       root=new BstNode;
       root->data=d;
       root->left=nullptr;
       root->right=nullptr;
       return true;
     }
   else if(root->data==d)
     return false;
   else if(root->data<d)
     return insert(root->right,d);
   else  return insert(root->left,d);
 }

//in-order function
void inOrder(BstNode* root, int& num)
{
  if (root!=nullptr)
    {
    inOrder (root->left,num);
    cout<< root->data<<endl;
    num++;
    if(num >0 && num % 5 ==0)
      cout<<endl;
    inOrder(root->right,num);
  }
}


//pre-order function
void preOrder(BstNode*root,int& num)
{
  if (root!=nullptr){
    cout<<root->data<<endl;
    num++;
    if(num>0 && num%5 ==0)
     cout<<endl;
    preOrder(root->left,num);
    preOrder(root->right,num);
  }
}

//post-order function
void postOrder(BstNode*root,int& num)
{
  if(root!=nullptr)
    {
    postOrder(root->left,num);
    postOrder(root->right,num);
    cout << root->data<<endl;
    num++;
    if(num>0 && num%5==0)
      cout<<endl;
  }
}
//deleteAll function
void deleteAll(BstNode*& root)
{
  if(root!=nullptr)
    {
    deleteAll(root->left);
    deleteAll(root->right);
    delete root;
    root=nullptr;
  }
}
    
