GO
USE mk_st19
GO

-- Tables
DROP TABLE IF EXISTS HISTORY
DROP TABLE IF EXISTS ACTION_TYPE 
DROP TABLE IF EXISTS MANIFEST
DROP TABLE IF EXISTS FLIGHT
DROP TABLE IF EXISTS PLANE
DROP TABLE IF EXISTS PASSENGER
DROP TABLE IF EXISTS DESTINATION




-- Views

DROP VIEW IF EXISTS VIEW_MANIFEST_ALL
DROP VIEW IF EXISTS VIEW_MANIFEST
DROP VIEW IF EXISTS VIEW_PASSENGER
DROP VIEW IF EXISTS VIEW_PASSENGERS_ALL
DROP VIEW IF EXISTS VIEW_PASSENGERS_UNASSIGNED
DROP VIEW IF EXISTS VIEW_PASSENGERS_ASSIGNED
DROP VIEW IF EXISTS VIEW_DESTINATION
DROP VIEW IF EXISTS VIEW_PLANE
DROP VIEW IF EXISTS VIEW_FLIGHT
DROP VIEW IF EXISTS VIEW_FLIGHT_ALL

-- Procedures
DROP PROCEDURE IF EXISTS SP_ADD_PASSENGER_TO_FLIGHT
DROP PROCEDURE IF EXISTS SP_ASSIGN_SEAT
DROP PROCEDURE IF EXISTS SP_DATA_RESET
DROP PROCEDURE IF EXISTS SP_FLIGHT_UPDATE_DESTINATION
DROP PROCEDURE IF EXISTS SP_FLIGHT_UPDATE_PLANE
DROP PROCEDURE IF EXISTS SP_GET_ASSIGNED_PASSENGERS
DROP PROCEDURE IF EXISTS SP_GET_FLIGHT_PASSENGERS
DROP PROCEDURE IF EXISTS SP_GET_UNASSIGNED_PASSENGERS
DROP PROCEDURE IF EXISTS SP_MANIFEST_UPDATE
DROP PROCEDURE IF EXISTS SP_PASSENGER_WITH_NO_FLIGHTS
DROP PROCEDURE IF EXISTS SP_PLANE_DELETE
DROP PROCEDURE IF EXISTS SP_PLANE_READ
DROP PROCEDURE IF EXISTS SP_PLANE_RESET
DROP PROCEDURE IF EXISTS SP_PLANE_UPDATE
GO

-- Create Tables
CREATE TABLE DESTINATION(
	DESTINATION_ID int IDENTITY(1,1) NOT NULL,
	DESTINATION_CODE char(3) NULL,
PRIMARY KEY (	DESTINATION_ID )
)
GO

CREATE TABLE PASSENGER(
	PASSENGER_ID int IDENTITY(1,1) NOT NULL,
	PASSENGER_NAME varchar(25) NULL,
PRIMARY KEY (PASSENGER_ID )
)
GO

CREATE TABLE PLANE(
	PLANE_ID int IDENTITY(1,1) NOT NULL,
	PLANE_MODEL varchar(25) NULL,
	PLANE_ROWS int NULL,
	PLANE_COLUMNS int NULL,
PRIMARY KEY (	PLANE_ID)
)
GO

CREATE TABLE FLIGHT(
	FLIGHT_ID int IDENTITY(1,1) NOT NULL,
	FLIGHT_DATE date NULL,
	DESTINATION_ID INT FOREIGN KEY REFERENCES DESTINATION (DESTINATION_ID),
	PLANE_ID INT FOREIGN KEY REFERENCES PLANE (PLANE_ID)
PRIMARY KEY (FLIGHT_ID)
)
GO

CREATE TABLE MANIFEST(
	PASSENGER_ID INT FOREIGN KEY REFERENCES PASSENGER (PASSENGER_ID),
	FLIGHT_ID INT FOREIGN KEY REFERENCES FLIGHT (FLIGHT_ID),
	MANIFEST_ROW int NULL,
	MANIFEST_COLUMN int NULL,
PRIMARY KEY (PASSENGER_ID,FLIGHT_ID)
) 
GO

CREATE TABLE ACTION_TYPE(
	ACTION_TYPE_ID int IDENTITY(1,1) NOT NULL,
	ACTION_TYPE_NAME varchar(25) NULL,
PRIMARY KEY (	ACTION_TYPE_ID)
)
GO

CREATE TABLE HISTORY(
	HISTORY_DATE datetime NOT NULL,
	PASSENGER_ID int NOT NULL,
	FLIGHT_ID int NOT NULL,
	HISTORY_MANIFEST_ROW int NULL,
	HISTORY_MANIFEST_COLUMN int NULL,
	ACTION_TYPE_ID INT FOREIGN KEY REFERENCES ACTION_TYPE(ACTION_TYPE_ID)
PRIMARY KEY 
(
	HISTORY_DATE ASC,
	PASSENGER_ID,
	FLIGHT_ID,
	ACTION_TYPE_ID
)
)
GO

-- Create Views
CREATE VIEW VIEW_MANIFEST
AS
SELECT        dbo.MANIFEST.*
FROM            dbo.MANIFEST
GO

CREATE VIEW VIEW_PASSENGERS_ALL 
AS
SELECT MANIFEST.FLIGHT_ID, FLIGHT.FLIGHT_DATE, DESTINATION.DESTINATION_CODE, PASSENGER.PASSENGER_NAME, MANIFEST_ROW, MANIFEST_COLUMN
FROM MANIFEST 
INNER JOIN PASSENGER
ON MANIFEST.PASSENGER_ID = PASSENGER.PASSENGER_ID
INNER JOIN FLIGHT
ON MANIFEST.FLIGHT_ID = FLIGHT.FLIGHT_ID
INNER JOIN DESTINATION
ON FLIGHT.DESTINATION_ID = DESTINATION.DESTINATION_ID

GO

CREATE VIEW VIEW_DESTINATION AS SELECT * FROM DESTINATION;
GO

CREATE VIEW VIEW_PASSENGER AS SELECT * FROM PASSENGER;
GO

CREATE VIEW VIEW_PLANE AS SELECT * FROM PLANE;
GO

CREATE VIEW VIEW_FLIGHT AS SELECT * FROM FLIGHT;
GO

CREATE VIEW VIEW_MANIFEST_ALL AS
select VIEW_MANIFEST.FLIGHT_ID AS FLIGHT_ID, 
VIEW_MANIFEST.PASSENGER_ID AS PASSENGER_ID, 
VIEW_MANIFEST.MANIFEST_COLUMN AS MANAFEST_COLUMN,
VIEW_MANIFEST.MANIFEST_ROW AS MANIFEST_ROW,
VIEW_DESTINATION.DESTINATION_CODE AS DESTINATION_CODE, 
VIEW_PASSENGER.PASSENGER_NAME AS PASSENGER_NAME
from VIEW_MANIFEST
INNER JOIN VIEW_PASSENGER ON VIEW_PASSENGER.PASSENGER_ID = VIEW_MANIFEST.PASSENGER_ID
INNER JOIN VIEW_FLIGHT ON VIEW_FLIGHT.FLIGHT_ID = VIEW_MANIFEST.FLIGHT_ID
INNER JOIN VIEW_DESTINATION ON VIEW_DESTINATION.DESTINATION_ID = VIEW_FLIGHT.DESTINATION_ID
GO

create view VIEW_FLIGHT_ALL as
select VIEW_FLIGHT.FLIGHT_ID AS FLIGHT_ID, 
VIEW_DESTINATION.DESTINATION_CODE AS DESTINATION_CODE,
VIEW_PLANE.PLANE_MODEL AS PLANE_MODEL,
VIEW_PLANE.PLANE_ROWS AS PLANE_ROWS,
VIEW_PLANE.PLANE_COLUMNS AS PLANE_COLUMNS,
VIEW_FLIGHT.FLIGHT_DATE AS FLIGHT_DATE
from VIEW_FLIGHT
INNER JOIN VIEW_DESTINATION ON VIEW_DESTINATION.DESTINATION_ID = VIEW_FLIGHT.DESTINATION_ID
inner join VIEW_PLANE ON VIEW_PLANE.PLANE_ID = VIEW_FLIGHT.FLIGHT_ID
GO

CREATE VIEW VIEW_PASSENGERS_UNASSIGNED AS
SELECT FLIGHT.FLIGHT_ID, FLIGHT.FLIGHT_DATE, DESTINATION.DESTINATION_CODE, PASSENGER.PASSENGER_NAME
FROM MANIFEST
INNER JOIN PASSENGER
ON PASSENGER.PASSENGER_ID = MANIFEST.PASSENGER_ID
INNER JOIN FLIGHT
ON FLIGHT.FLIGHT_ID= MANIFEST.FLIGHT_ID
inner join DESTINATION
on DESTINATION.DESTINATION_ID = FLIGHT.DESTINATION_ID
INNER JOIN PLANE
ON PLANE.PLANE_ID = FLIGHT.PLANE_ID
WHERE MANIFEST_ROW is null;
GO


CREATE VIEW VIEW_PASSENGERS_ASSIGNED AS
SELECT FLIGHT.FLIGHT_ID, FLIGHT.FLIGHT_DATE, DESTINATION.DESTINATION_CODE, PASSENGER.PASSENGER_NAME, MANIFEST_ROW, MANIFEST_COLUMN
FROM MANIFEST
INNER JOIN PASSENGER
ON PASSENGER.PASSENGER_ID = MANIFEST.PASSENGER_ID
INNER JOIN FLIGHT
ON FLIGHT.FLIGHT_ID= MANIFEST.FLIGHT_ID
inner join DESTINATION
on DESTINATION.DESTINATION_ID = FLIGHT.DESTINATION_ID
INNER JOIN PLANE
ON PLANE.PLANE_ID = FLIGHT.PLANE_ID
GO

-- Procedures
CREATE PROCEDURE SP_ADD_PASSENGER_TO_FLIGHT @FLIGHT_ID INT, @PASSENGER_NAME VARCHAR(25) 
AS
BEGIN
select @FLIGHT_ID as FLIGHT_ID, passenger.PASSENGER_ID from passenger
left outer join manifest on passenger.PASSENGER_ID = manifest.PASSENGER_ID
where PASSENGER_NAME= @PASSENGER_NAME
and (manifest.MANIFEST_ROW is null and manifest.MANIFEST_COLUMN is null)
and (manifest.FLIGHT_ID is null or manifest.FLIGHT_ID <>@FLIGHT_ID)
END
GO

CREATE PROCEDURE SP_ASSIGN_SEAT @FLIGHT_ID INT, @PASSENGER_NAME VARCHAR(25), @MANIFEST_ROW INT, @MANIFEST_COLUMN INT 
AS
BEGIN
UPDATE MANIFEST
SET MANIFEST_ROW = @MANIFEST_ROW, MANIFEST_COLUMN = @MANIFEST_COLUMN 
FROM PASSENGER
INNER JOIN MANIFEST 
ON MANIFEST.PASSENGER_ID = PASSENGER.PASSENGER_ID
WHERE FLIGHT_ID = @FLIGHT_ID AND PASSENGER.PASSENGER_NAME = @PASSENGER_NAME
END
GO

CREATE PROCEDURE SP_DATA_RESET
AS
BEGIN
	DELETE FROM HISTORY -- Clear history table
	DELETE FROM MANIFEST	-- Delete the existing data
	DELETE FROM FLIGHT	-- Delete the existing data
	DELETE FROM DESTINATION	-- Delete the existing data
	DELETE FROM PASSENGER	-- Delete the existing data
	DELETE FROM PLANE	-- Delete the existing data

	-- Initialize PLANE Data from Mike's Database Views of the same name
	SET IDENTITY_INSERT PLANE ON -- Turn off Identity numbering (the switch is opposite)
	INSERT INTO PLANE(PLANE_ID, PLANE_MODEL, PLANE_ROWS, PLANE_COLUMNS) SELECT PLANE_ID, PLANE_MODEL, PLANE_ROWS, PLANE_COLUMNS FROM mk_koenig.DBO.VIEW_PLANE;	
	SET IDENTITY_INSERT PLANE OFF -- Turn on the Identity Numbering

	-- Initialize PASSENGER Data from Mike's Database Views of the same name
	SET IDENTITY_INSERT PASSENGER ON -- Turn off Identity numbering (the switch is opposite)
	INSERT INTO PASSENGER(PASSENGER_ID, PASSENGER_NAME) SELECT PASSENGER_ID, PASSENGER_NAME FROM mk_koenig.DBO.VIEW_PASSENGER;	
	SET IDENTITY_INSERT PASSENGER OFF -- Turn on the Identity Numbering

	-- Initialize DESTINATION Data from Mike's Database Views of the same name
	SET IDENTITY_INSERT DESTINATION ON -- Turn off Identity numbering (the switch is opposite)
	INSERT INTO DESTINATION(DESTINATION_ID, DESTINATION_CODE) SELECT DESTINATION_ID, DESTINATION_CODE FROM mk_koenig.DBO.VIEW_DESTINATION;	
	SET IDENTITY_INSERT DESTINATION OFF -- Turn on the Identity Numbering

	-- Initialize FLIGHT Data from Mike's Database Views of the same name
	SET IDENTITY_INSERT FLIGHT ON -- Turn off Identity numbering (the switch is opposite)
	INSERT INTO FLIGHT(FLIGHT_ID, PLANE_ID, DESTINATION_ID, FLIGHT_DATE) SELECT FLIGHT_ID, PLANE_ID, DESTINATION_ID, FLIGHT_DATE FROM mk_koenig.DBO.VIEW_FLIGHT;	
	SET IDENTITY_INSERT FLIGHT OFF -- Turn on the Identity Numbering

	-- Initialize MANIFEST Data from Mike's Database Views of the same name
	INSERT INTO MANIFEST(PASSENGER_ID,FLIGHT_ID,MANIFEST_ROW,MANIFEST_COLUMN ) SELECT PASSENGER_ID,FLIGHT_ID,MANIFEST_ROW,MANIFEST_COLUMN FROM mk_koenig.DBO.VIEW_MANIFEST;	
END
GO

CREATE PROCEDURE SP_FLIGHT_UPDATE_DESTINATION @DESTINATION_CODE CHAR(3), @DESTINATION_NEW CHAR(3)
AS
BEGIN
UPDATE FLIGHT
SET DESTINATION_ID = D1.DESTINATION_ID
FROM DESTINATION D1, FLIGHT
INNER JOIN DESTINATION D2 ON D2.DESTINATION_ID = FLIGHT.FLIGHT_ID
WHERE D2.DESTINATION_CODE = @DESTINATION_CODE AND d1.DESTINATION_CODE = @DESTINATION_NEW
END
GO

CREATE PROCEDURE SP_FLIGHT_UPDATE_PLANE @DESTINATION_CODE CHAR(3), @PLANE_OLD VARCHAR(25), @PLANE_NEW VARCHAR(25)
AS
BEGIN
update flight
SET FLIGHT.PLANE_ID = P1.PLANE_ID
FROM PLANE P1, FLIGHT
INNER JOIN DESTINATION ON DESTINATION.DESTINATION_ID = FLIGHT.DESTINATION_ID
INNER JOIN PLANE P2 ON FLIGHT.PLANE_ID = P2.PLANE_ID
WHERE DESTINATION_CODE = @DESTINATION_CODE AND P2.PLANE_MODEL = @PLANE_OLD and P1.PLANE_MODEL = @PLANE_NEW
END
GO

CREATE PROCEDURE SP_GET_ASSIGNED_PASSENGERS @CODE CHAR(3)
AS 
BEGIN
SELECT FLIGHT_ID, DESTINATION_CODE, FLIGHT_DATE, PASSENGER_NAME, MANIFEST_ROW, MANIFEST_COLUMN FROM VIEW_PASSENGERS_ASSIGNED 
WHERE DESTINATION_CODE = @CODE
END
GO

CREATE PROCEDURE SP_GET_FLIGHT_PASSENGERS @DESTINATION_CODE CHAR(3)
AS
BEGIN
	SELECT MANIFEST.FLIGHT_ID, DESTINATION_CODE, MANIFEST.PASSENGER_ID, PASSENGER_NAME, MANIFEST.MANIFEST_ROW, MANIFEST.MANIFEST_COLUMN FROM MANIFEST
	INNER JOIN PASSENGER ON PASSENGER.PASSENGER_ID = MANIFEST.PASSENGER_ID
	INNER JOIN FLIGHT ON FLIGHT.FLIGHT_ID = MANIFEST.FLIGHT_ID
	INNER JOIN DESTINATION ON DESTINATION.DESTINATION_ID = FLIGHT.DESTINATION_ID
	WHERE DESTINATION_CODE = @DESTINATION_CODE
END
GO

CREATE PROCEDURE SP_GET_UNASSIGNED_PASSENGERS @CODE CHAR(3)
AS 
BEGIN
SELECT FLIGHT_ID, DESTINATION_CODE, FLIGHT_DATE, PASSENGER_NAME FROM VIEW_PASSENGERS_UNASSIGNED WHERE DESTINATION_CODE = @CODE
END
GO

CREATE PROCEDURE SP_MANIFEST_UPDATE @DESTINATION_CODE CHAR(3), @PASSENGER_NAME VARCHAR(25), @MANIFEST_ROW INT, @MANIFEST_COLUMN INT 
AS
BEGIN
UPDATE MANIFEST
SET MANIFEST_ROW = @MANIFEST_ROW, MANIFEST_COLUMN = @MANIFEST_COLUMN 
FROM PASSENGER
INNER JOIN MANIFEST ON MANIFEST.PASSENGER_ID = PASSENGER.PASSENGER_ID
INNER JOIN FLIGHT ON MANIFEST.FLIGHT_ID = FLIGHT.FLIGHT_ID
INNER JOIN DESTINATION ON DESTINATION.DESTINATION_ID = FLIGHT.DESTINATION_ID
WHERE DESTINATION_CODE = @DESTINATION_CODE AND PASSENGER.PASSENGER_NAME = @PASSENGER_NAME
END
GO

CREATE PROCEDURE SP_PASSENGER_WITH_NO_FLIGHTS
AS 
BEGIN
select passenger.PASSENGER_NAME from manifest
right outer join passenger on MANIFEST.PASSENGER_ID = PASSENGER.PASSENGER_ID
where manifest.PASSENGER_ID is null
END
GO

CREATE PROCEDURE SP_PLANE_DELETE @PLANE_MODEL varchar(25)
AS
BEGIN
	DELETE PLANE 
	FROM PLANE
	LEFT OUTER JOIN FLIGHT on FLIGHT.PLANE_ID = PLANE.PLANE_ID
	WHERE PLANE_MODEL = @PLANE_MODEL AND FLIGHT_ID IS NULL
END
GO

CREATE PROCEDURE SP_PLANE_READ @PLANE_MODEL varchar(25)
AS
BEGIN
	SELECT PLANE_ID, PLANE_MODEL, PLANE_ROWS, PLANE_COLUMNS FROM PLANE
	WHERE PLANE_MODEL = @PLANE_MODEL
END

GO
CREATE PROCEDURE SP_PLANE_RESET
AS
BEGIN
	-- Remove all data
	DELETE FROM PLANE-- Delete the existing data

	-- Insert data from Mike's database
	SET IDENTITY_INSERT PLANE ON -- Turn off Identity numbering (the switch is opposite)
	INSERT INTO PLANE(PLANE_ID, PLANE_MODEL, PLANE_ROWS, PLANE_COLUMNS) 
	SELECT PLANE_ID, PLANE_MODEL, PLANE_ROWS, PLANE_COLUMNS FROM mk_koenig.DBO.VIEW_PLANE;
	SET IDENTITY_INSERT PLANE OFF -- Turn on the Identity Numbering
END
GO

CREATE PROCEDURE SP_PLANE_UPDATE @PLANE_MODEL varchar(25), @PLANE_MODEL_UPDATE varchar(25), @PLANE_ROWS int, @PLANE_COLUMNS int
AS
BEGIN
	UPDATE PLANE
	SET PLANE_MODEL = @PLANE_MODEL_UPDATE, PLANE_ROWS = @PLANE_ROWS, PLANE_COLUMNS = @PLANE_COLUMNS
	WHERE PLANE_MODEL = @PLANE_MODEL
END
GO


exec SP_DATA_RESET

DROP VIEW IF EXISTS VIEW_FLIGHT_ALL
GO
CREATE VIEW VIEW_FLIGHT_ALL
AS
SELECT FLIGHT_ID, DESTINATION_CODE, PLANE_MODEL, PLANE_ROWS, PLANE_COLUMNS, FLIGHT_DATE 
FROM FLIGHT
INNER JOIN PLANE ON PLANE.PLANE_ID = FLIGHT.PLANE_ID
INNER JOIN DESTINATION ON DESTINATION.DESTINATION_ID = FLIGHT.DESTINATION_ID
GO


select * from plane
select * from destination
select * from flight

DROP PROCEDURE IF EXISTS SP_FLIGHT_ADD
GO
CREATE PROCEDURE SP_FLIGHT_ADD @DESTINATION_CODE char(3), @PLANE_ID int
AS
BEGIN
IF NOT EXISTS(SELECT DESTINATION_CODE FROM DESTINATION
	INNER JOIN FLIGHT ON FLIGHT.DESTINATION_ID = DESTINATION.DESTINATION_ID
	INNER JOIN PLANE ON PLANE.PLANE_ID = FLIGHT.PLANE_ID
	WHERE PLANE.PLANE_ID = @PLANE_ID AND DESTINATION_CODE = @DESTINATION_CODE)
	BEGIN
		INSERT INTO FLIGHT(DESTINATION_ID,FLIGHT_DATE, PLANE_ID)
		SELECT DESTINATION.DESTINATION_ID, GETUTCDATE(), @PLANE_ID as PLANE_ID FROM  DESTINATION
		WHERE DESTINATION_CODE = @DESTINATION_CODE
	END
END
GO

