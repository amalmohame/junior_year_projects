//Amal Mohamed
//p5.cpp
//This program uses a hash function find words in a linked list that have been pre processed
// and prints the word count 

#include <fstream>
#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

//signature of my hash function
int myHash (string word);

struct Node
{
  int count;
  string word;
  Node* next;
};

string preProcessing(string word, int MAX,int wordCount);
//Pre Condition:None
//Post Condition:None
//This file pre processes the words in the ulyss.txt file so the words
//with more than five letters and punctuation marks are removed.
//All words are converted to lowercase as well.
void insertHash(string element,Node** hTable,int value,int &colCount,int &unCount);
//Pre:Condition:On the first call hTable is null
//Post Condition:none
//This function inserts letters into a hash table called hTable.
void deleteList(Node** hTable,int size);
//Pre Condition:None
//Post Condition:None
//This program deallocates hTable's memory.

//My main function.
int main()
{

 Node** hTable;
 int unCount=0;
 int hashValue;
 int colCount=0;
 int value;
 string element;
 const string FILE = "ulyss12.txt";
 const int MAX = 5;
 cout<<"Welcome to my Hash Function"<< endl;
 string getFileName;
 cout<<"Please enter the file name."<< endl;
 cin>> getFileName;
 ifstream file;
 file.open(FILE);
 if(file.fail()){
 cout<<"This file could not be read , please press Enter";
 cin.get();
 return -1;
 }
 string userInput;
 cout<< "Please enter a word";
 cin>> userInput;
 string word;
 int wordCount=0;
  while(file>>word){
   wordCount++;

 }
 file.close();
  hashValue = 107377;
  hTable= new Node*[hashValue];
  file.open(FILE);

 while(file>>word){
   word = preProcessing(word,MAX,wordCount);
   value = myHash(word);
   insertHash( word,hTable,value,colCount,unCount);

 }
 cout <<"There are "<< unCount << " unique words."<< endl;
 cout <<"My load factor is " << hashValue<< endl;
 cout <<"There are "<< colCount << " collisons."<< endl;
 cout<<"My word count is " << wordCount << endl;
 cout<< "Thank you for looking at my Hash Fuction,Goodbye" << endl ;
 deleteList(hTable,hashValue);
 return 0;

}


//Takes in a string and converts it into an index value
//so we can locate it in the hash table.

int myHash(string word)
 {
  int value = 0;
  for(int i =0;i<(int)word.length();i++){
    value=value+(int)word[i];
    }
  return value;
}


string preProcessing(string word,int MAX,int wordCount)
 {

   int puncCounter;
   int lettCount;
   for(unsigned int i=0; i<word.length();i++){
     if(isalpha(word[i])){
        word[i]= tolower(word[i]);
        lettCount++;
     }

      if(ispunct(word[i])){
        puncCounter++;
      }
    }

    if(lettCount>MAX && puncCounter<=2){
      while(ispunct(word[0]))
          word.erase(0,1);

      while(ispunct(word[word.length() -1]) &&
        word[word.length() -1] != '\'')
        word.erase(word.length() -1,1);
       }

    return word;
 }


void insertHash(string element, Node** hTable,int value,int &colCount,int &unCount)
{

  Node* list = nullptr;
  if(hTable[value] == nullptr){
    hTable[value]= new Node;
    hTable[value]->word=element;
    hTable[value]->count = 1;
    hTable[value]->next= nullptr;
    unCount++;
    return;
  }

  else{
    colCount++;
    list = hTable[value];
    while(list != nullptr ){
      if(list->word == element){
        list->count++;
        return;
      }

      list=list->next;
    }

  }

  if(list==nullptr){
    Node*ptr = new Node;
    list=hTable[value];
    ptr->next=list;
    hTable[value]=ptr;
    unCount++;
    ptr->word=element;
    ptr->count=1;
    }
}


void deleteList(Node** hTable,int size)
{
  Node* temp = new Node;
  Node* nodePtr=new Node;
  for( int i=0; i<size; i++){
    while(nodePtr!=nullptr){
      temp=nodePtr;
      nodePtr = nodePtr->next;
      delete temp;

    }

  }
delete[] hTable;
}


