
    -- 1. USE your DB.  Remember GO separates commands think of it like a {} block.  no ';' after GO
USE mk_st19
-- 2. Drop all Tables if it exists

DROP TABLE IF EXISTS MANIFEST
DROP TABLE IF EXISTS FLIGHT
DROP TABLE IF EXISTS DESTINATION
DROP TABLE IF EXISTS PASSENGER
DROP TABLE IF EXISTS PLANE



-- 3. Create PLANE table
CREATE TABLE PLANE (
PLANE_ID INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
PLANE_MODEL VARCHAR(25),
PLANE_ROWS INT,
PLANE_COLUMNS INT
)
-- 4. Create PASSENGER table
CREATE TABLE PASSENGER(
PASSENGER_ID INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
PASSENGER_NAME VARCHAR(25),

)

-- 5. Create DESTINATION table
CREATE TABLE DESTINATION(
DESTINATION_ID INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
DESTINATION_CODE CHAR(3)
) 

-- 6. Create FLIGHT table
CREATE TABLE FLIGHT(
 FLIGHT_ID INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
 PLANE_ID INT FOREIGN KEY REFERENCES PLANE(PLANE_ID),
 DESTINATION_ID INT FOREIGN KEY REFERENCES DESTINATION(DESTINATION_ID),
 FLIGHT_DATE DATE
 )
-- 7. Create MANIFEST table
CREATE TABLE MANIFEST(
 FLIGHT_ID INT FOREIGN KEY REFERENCES FLIGHT(FLIGHT_ID),
 PASSENGER_ID INT FOREIGN KEY REFERENCES PASSENGER(PASSENGER_ID),
 PRIMARY KEY(FLIGHT_ID,PASSENGER_ID),
 MANIFEST_ROWS INT,
 MANIFEST_COLUMNS INT
)
-- 8 Initialize PLANE Data from Mike's Database Views of the same name
DELETE FROM PLANE
SET IDENTITY_INSERT PLANE ON 
INSERT INTO PLANE(PLANE_ID ,PLANE_MODEL ,PLANE_ROWS ,PLANE_COLUMNS)
SELECT PLANE_ID, PLANE_MODEL,PLANE_ROWS,PLANE_COLUMNS FROM mk_koenig.DBO.VIEW_PLANE;
SET IDENTITY_INSERT PLANE OFF

-- 9 Initialize PASSENGER Data from Mike's Database Views of the same name
DELETE FROM PASSENGER
SET IDENTITY_INSERT PASSENGER ON
INSERT INTO PASSENGER(PASSENGER_ID ,PASSENGER_NAME)
SELECT PASSENGER_ID, PASSENGER_NAME FROM mk_koenig.DBO.VIEW_PASSENGER;
SET IDENTITY_INSERT PASSENGER OFF

-- 10 Initialize DESTINATION Data from Mike's Database Views of the same name
DELETE FROM DESTINATION
SET IDENTITY_INSERT DESTINATION ON
INSERT INTO DESTINATION(DESTINATION_ID, DESTINATION_CODE)
SELECT DESTINATION_ID, DESTINATION_CODE FROM mk_koenig.DBO.VIEW_DESTINATION;
SET IDENTITY_INSERT DESTINATION OFF

SELECT * FROM DESTINATION
-- 11 Initialize FLIGHT Data from Mike's Database Views of the same name
DELETE FROM FLIGHT
SET IDENTITY_INSERT FLIGHT ON
INSERT INTO FLIGHT(FLIGHT_ID, PLANE_ID,DESTINATION_ID,FLIGHT_DATE)
SELECT FLIGHT_ID, PLANE_ID,DESTINATION_ID, FLIGHT_DATE FROM mk_koenig.DBO.VIEW_FLIGHT;
SET IDENTITY_INSERT FLIGHT OFF




-- 12 Initialize MANIFEST Data from Mike's Database Views of the same name
DELETE FROM MANIFEST 
INSERT INTO MANIFEST(FLIGHT_ID,PASSENGER_ID,MANIFEST_ROWS,MANIFEST_COLUMNS )
SELECT FLIGHT_ID,PASSENGER_ID,MANIFEST_ROW,MANIFEST_COLUMN FROM mk_koenig.DBO.VIEW_MANIFEST;


-- 13. Update the Manifest for Mike on Flight to Seattle to have seat 1, 1
UPDATE MANIFEST
SET MANIFEST_ROWS = 1, MANIFEST_COLUMNS = 1
FROM MANIFEST
JOIN FLIGHT ON FLIGHT.FLIGHT_ID = MANIFEST.FLIGHT_ID
JOIN PASSENGER ON PASSENGER.PASSENGER_ID = MANIFEST.PASSENGER_ID
JOIN DESTINATION ON DESTINATION.DESTINATION_ID = FLIGHT.DESTINATION_ID
WHERE DESTINATION_CODE = 'SEA' AND PASSENGER_NAME = 'Mike'

-- 14. Select Flight ID, City Code, Date, Passenger Name, Seat Row, Column for all passengers on flights to 'SEA'
SELECT FLIGHT.FLIGHT_ID, DESTINATION_CODE, FLIGHT_DATE, PASSENGER_NAME, MANIFEST_ROWS, MANIFEST_COLUMNS FROM MANIFEST
JOIN FLIGHT ON FLIGHT.FLIGHT_ID = MANIFEST.FLIGHT_ID
JOIN DESTINATION ON DESTINATION.DESTINATION_ID = FLIGHT.DESTINATION_ID
JOIN PASSENGER ON PASSENGER.PASSENGER_ID = MANIFEST.PASSENGER_ID
WHERE DESTINATION_CODE = 'SEA'

-- 15. Select Unassigned Passengers to SEA with Flight ID, Date, City Code, Passenger Name (passengers with no row or column assigned)
SELECT FLIGHT.FLIGHT_ID, FLIGHT_DATE, DESTINATION_CODE, PASSENGER_NAME FROM MANIFEST
JOIN FLIGHT ON FLIGHT.FLIGHT_ID = MANIFEST.FLIGHT_ID
JOIN DESTINATION ON DESTINATION.DESTINATION_ID = FLIGHT.DESTINATION_ID
JOIN PASSENGER ON PASSENGER.PASSENGER_ID = MANIFEST.PASSENGER_ID
WHERE MANIFEST_COLUMNS IS NULL AND MANIFEST_ROWS IS NULL AND DESTINATION_CODE = 'SEA'

-- 16. Create a view called VIEW_PASSENGERS_ASSIGNED that Selects from View that shows the Flight ID,
--     City Code, Date, Passenger Name, Seat Row, Column for all cities for passengers with a row and column.
--     Name it VIEW_PASSENGERS_ASSIGNED
DROP VIEW IF EXISTS VIEW_PASSENGERS_ASSIGNED
GO
CREATE VIEW VIEW_PASSENGERS_ASSIGNED AS
SELECT FLIGHT.FLIGHT_ID, DESTINATION_CODE, FLIGHT_DATE, PASSENGER_NAME, MANIFEST_ROWS, MANIFEST_COLUMNS
FROM MANIFEST
JOIN FLIGHT ON FLIGHT.FLIGHT_ID = MANIFEST.FLIGHT_ID
JOIN DESTINATION ON DESTINATION.DESTINATION_ID = FLIGHT.DESTINATION_ID
JOIN PASSENGER ON PASSENGER.PASSENGER_ID = MANIFEST.PASSENGER_ID
WHERE MANIFEST_COLUMNS IS NOT NULL AND MANIFEST_ROWS IS NOT NULL
GO
SELECT * FROM VIEW_PASSENGERS_ASSIGNED 

-- 17. Select Flight ID, City Code, Date, Passenger Name, Seat Row, Column from
--     VIEW_PASSENGERS_ASSIGNED that are going to 'SEA'
SELECT FLIGHT_ID, DESTINATION_CODE, FLIGHT_DATE, PASSENGER_NAME, MANIFEST_ROWS, MANIFEST_COLUMNS
FROM VIEW_PASSENGERS_ASSIGNED
WHERE DESTINATION_CODE = 'SEA'

-- 18. Create a view for VIEW_PASSENGERS_UNASSIGNED, based on the pattern of steps 14, and 15
DROP VIEW IF EXISTS VIEW_PASSENGERS_UNASSIGNED
GO
CREATE VIEW VIEW_PASSENGERS_UNASSIGNED AS
SELECT FLIGHT.FLIGHT_ID, DESTINATION_CODE, FLIGHT_DATE, PASSENGER_NAME, MANIFEST_ROWS, MANIFEST_COLUMNS
FROM MANIFEST
JOIN FLIGHT ON FLIGHT.FLIGHT_ID = MANIFEST.FLIGHT_ID
JOIN DESTINATION ON DESTINATION.DESTINATION_ID = FLIGHT.DESTINATION_ID
JOIN PASSENGER ON PASSENGER.PASSENGER_ID = MANIFEST.PASSENGER_ID
WHERE MANIFEST_COLUMNS IS NULL AND MANIFEST_ROWS IS NULL
GO
SELECT * FROM VIEW_PASSENGERS_UNASSIGNED 

-- 19. Select Flight ID, City Code, Date, Passenger Name, Seat Row, Column from VIEW_PASSENGERS_UNASSIGNED that are going to 'SEA'
SELECT FLIGHT_ID, DESTINATION_CODE, FLIGHT_DATE, PASSENGER_NAME, MANIFEST_ROWS, MANIFEST_COLUMNS
FROM VIEW_PASSENGERS_UNASSIGNED
WHERE DESTINATION_CODE = 'SEA'

-- 20. Drop and Create a Stored Procedure called SP_GET_ASSIGNED_PASSENGERS, 
--     that takes in the destination city code and Gets the Assigned Passengers
--     from the Assigned View. Name it SP_GET_ASSIGNED_PASSENGERS. 
DROP PROCEDURE IF EXISTS SP_GET_ASSIGNED_PASSENGERS
GO
CREATE PROCEDURE SP_GET_ASSIGNED_PASSENGERS @CODE CHAR(3)
AS 
SELECT DESTINATION_CODE, PASSENGER_NAME
FROM  VIEW_PASSENGERS_ASSIGNED
GO

-- 21. EXEC the Stored Procedure for the destination 'SEA'  ( EXEC SP_GET_ASSIGNED_PASSENGERS 'SEA' )
EXEC SP_GET_ASSIGNED_PASSENGERS 'SEA'

-- 22. Drop and Create a Stored Procedure called SP_GET_UNASSIGNED_PASSENGERS, 
--     that takes in the destination city code and Gets the Passengers with no Assigned seats using the View. 
--     Name it SP_GET_UNASSIGNED_PASSENGERS. 
DROP PROCEDURE IF EXISTS SP_GET_UNASSIGNED_PASSENGERS
GO
CREATE PROCEDURE SP_GET_UNASSIGNED_PASSENGERS @DESTINATION_CODE CHAR(3)
AS 
SELECT DESTINATION_CODE, PASSENGER_NAME
FROM  VIEW_PASSENGERS_UNASSIGNED
GO

-- 23. EXEC the unassigned Stored Procedure for the destination 'SEA'  
EXEC SP_GET_UNASSIGNED_PASSENGERS 'SEA'

-- 24. Drop and Create a Stored Procedure that takes in a Flight ID INT,
-- Passenger varchar(25), Row, Column and Assigns them a Seat on a flight if they are 
-- booked for the flight. Name it SP_ASSIGN_SEAT.  (Review #12)
DROP PROCEDURE IF EXISTS SP_ASSIGN_SEAT
GO
CREATE PROCEDURE SP_ASSIGN_SEAT @FLIGHT_ID INT, @PASSENGER_NAME VARCHAR(25), @MANIFEST_ROW INT , @MANIFEST_COLUMN INT
AS 
BEGIN
UPDATE MANIFEST
SET MANIFEST_ROWS =  @MANIFEST_ROW, MANIFEST_COLUMNS = @MANIFEST_COLUMN
FROM MANIFEST
JOIN FLIGHT ON FLIGHT.FLIGHT_ID = MANIFEST.FLIGHT_ID
JOIN PASSENGER ON PASSENGER.PASSENGER_ID = MANIFEST.PASSENGER_ID
WHERE FLIGHT.FLIGHT_ID = @FLIGHT_ID AND PASSENGER_NAME = @PASSENGER_NAME
SELECT FLIGHT_ID, PASSENGER_ID, MANIFEST_ROWS, MANIFEST_COLUMNS
FROM MANIFEST
END
GO

-- 25. Drop Create a Stored Procedure Named SP_PASSENGER_WITH_NO_FLIGHTS that selects all
--     passengers who have never booked a flight ( RIGHT outer join...)
DROP PROCEDURE IF EXISTS SP_PASSENGER_WITH_NO_FLIGHTS
GO
CREATE PROCEDURE SP_PASSENGER_WITH_NO_FLIGHTS
AS 
SELECT PASSENGER.PASSENGER_ID, PASSENGER_NAME
FROM  MANIFEST
RIGHT JOIN PASSENGER ON MANIFEST.PASSENGER_ID = PASSENGER.PASSENGER_ID
WHERE MANIFEST.FLIGHT_ID IS NULL
GO

-- 26. Execute the Assign Seat SP to Set Mike's seat to 1, 3 on flight 1 
EXEC SP_ASSIGN_SEAT 1, 'Mike', 1, 3;

-- 27. Execute the Assign Seat SP to Set Doug's seat to 10, 4 on flight 1
EXEC SP_ASSIGN_SEAT 1, 'Doug', 10, 4;

-- 28. Execute the Assigned Passengers Stored Procedure for the destination 'SEA'  ( EXEC SP_GET_ASSIGNED_PASSENGERS 'SEA' )
EXEC SP_GET_ASSIGNED_PASSENGERS 'SEA'

-- 29. Execute the SP for Unassigned Passengers to 'SEA'
EXEC SP_GET_UNASSIGNED_PASSENGERS 'SEA'

-- 30. Execute the SP to show passengers with no flights
EXEC SP_PASSENGER_WITH_NO_FLIGHTS

